import React from 'react';
import { PieChart, Pie, Cell, ResponsiveContainer, Tooltip, Legend, BarChart, Bar, XAxis, YAxis, CartesianGrid } from 'recharts';
import { TrendingUp, PieChart as PieChartIcon, BarChart3 } from 'lucide-react';
import { ScanResult } from '../types';

interface VulnerabilityChartProps {
  result: ScanResult;
}

export const VulnerabilityChart: React.FC<VulnerabilityChartProps> = ({ result }) => {
  // Calculate total lines of code
  const totalLines = result.totalLines || 100; // Fallback if not provided
  const vulnerableLines = result.vulnerabilities.length;
  const cleanLines = totalLines - vulnerableLines;

  // Code health data
  const codeHealthData = [
    {
      name: 'Clean Code',
      value: cleanLines,
      percentage: ((cleanLines / totalLines) * 100).toFixed(1),
      color: '#10b981'
    },
    {
      name: 'Vulnerable Code',
      value: vulnerableLines,
      percentage: ((vulnerableLines / totalLines) * 100).toFixed(1),
      color: '#06b6d4'
    }
  ];

  // Vulnerability types distribution
  const vulnerabilityTypes = result.vulnerabilities.reduce((acc, vuln) => {
    const category = vuln.category;
    acc[category] = (acc[category] || 0) + 1;
    return acc;
  }, {} as Record<string, number>);

  const vulnerabilityData = Object.entries(vulnerabilityTypes).map(([category, count], index) => ({
    name: category,
    value: count,
    percentage: ((count / result.vulnerabilities.length) * 100).toFixed(1),
    color: [
      '#06b6d4', '#3b82f6', '#8b5cf6', '#f59e0b', 
      '#ef4444', '#10b981', '#f97316', '#ec4899'
    ][index % 8]
  }));

  const CustomTooltip = ({ active, payload }: any) => {
    if (active && payload && payload.length) {
      const data = payload[0].payload;
      return (
        <div className="bg-slate-800/90 backdrop-blur-xl border border-cyan-400/30 rounded-xl p-4 shadow-xl">
          <p className="text-slate-200 font-semibold">{data.name}</p>
          <p className="text-cyan-300">Count: {data.value}</p>
          <p className="text-slate-300">Percentage: {data.percentage}%</p>
        </div>
      );
    }
    return null;
  };

  const CustomLegend = ({ payload }: any) => (
    <div className="flex flex-wrap justify-center gap-4 mt-4">
      {payload.map((entry: any, index: number) => (
        <div key={index} className="flex items-center gap-2">
          <div 
            className="w-3 h-3 rounded-full" 
            style={{ backgroundColor: entry.color }}
          />
          <span className="text-slate-300 text-sm">{entry.value}</span>
        </div>
      ))}
    </div>
  );

  return (
    <div className="bg-slate-800/40 backdrop-blur-xl rounded-2xl p-8 border border-cyan-400/30 shadow-2xl shadow-cyan-400/10 relative overflow-hidden group hover:shadow-cyan-400/20 transition-all duration-500">
      {/* Animated Border Effect */}
      <div className="absolute inset-0 bg-gradient-to-r from-cyan-400/20 via-blue-400/20 to-indigo-400/20 rounded-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-500 blur-xl"></div>
      
      <div className="relative z-10">
        <div className="flex items-center gap-4 mb-8">
          <div className="p-3 bg-gradient-to-br from-cyan-400/20 via-blue-400/20 to-indigo-400/20 rounded-xl border border-cyan-400/40 shadow-xl shadow-cyan-400/20 backdrop-blur-sm animate-pulse">
            <TrendingUp className="w-6 h-6 text-cyan-300" />
          </div>
          <h3 className="text-2xl font-bold bg-gradient-to-r from-cyan-300 to-blue-300 bg-clip-text text-transparent">
            Code Analysis Visualization
          </h3>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Code Health Chart */}
          <div className="bg-gradient-to-br from-slate-700/40 to-slate-600/40 rounded-xl p-6 border border-cyan-400/20 shadow-xl shadow-cyan-400/10 backdrop-blur-sm">
            <div className="flex items-center gap-3 mb-6">
              <PieChartIcon className="w-5 h-5 text-cyan-400" />
              <h4 className="text-xl font-bold text-slate-200">Code Health Overview</h4>
            </div>
            
            <div className="h-64">
              <ResponsiveContainer width="100%" height="100%">
                <PieChart>
                  <Pie
                    data={codeHealthData}
                    cx="50%"
                    cy="50%"
                    innerRadius={40}
                    outerRadius={80}
                    paddingAngle={5}
                    dataKey="value"
                  >
                    {codeHealthData.map((entry, index) => (
                      <Cell key={`cell-${index}`} fill={entry.color} />
                    ))}
                  </Pie>
                  <Tooltip content={<CustomTooltip />} />
                  <Legend content={<CustomLegend />} />
                </PieChart>
              </ResponsiveContainer>
            </div>

            <div className="mt-6 grid grid-cols-2 gap-4">
              <div className="text-center p-4 bg-slate-800/50 rounded-lg border border-emerald-400/20">
                <div className="text-2xl font-bold text-emerald-400">{codeHealthData[0].percentage}%</div>
                <div className="text-slate-300 text-sm">Clean Code</div>
              </div>
              <div className="text-center p-4 bg-slate-800/50 rounded-lg border border-cyan-400/20">
                <div className="text-2xl font-bold text-cyan-400">{codeHealthData[1].percentage}%</div>
                <div className="text-slate-300 text-sm">Vulnerable</div>
              </div>
            </div>
          </div>

          {/* Vulnerability Types Distribution */}
          {result.vulnerabilities.length > 0 && (
            <div className="bg-gradient-to-br from-slate-700/40 to-slate-600/40 rounded-xl p-6 border border-cyan-400/20 shadow-xl shadow-cyan-400/10 backdrop-blur-sm">
              <div className="flex items-center gap-3 mb-6">
                <BarChart3 className="w-5 h-5 text-cyan-400" />
                <h4 className="text-xl font-bold text-slate-200">Vulnerability Types</h4>
              </div>
              
              <div className="h-64">
                <ResponsiveContainer width="100%" height="100%">
                  <BarChart data={vulnerabilityData} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>
                    <CartesianGrid strokeDasharray="3 3" stroke="rgba(6, 182, 212, 0.1)" />
                    <XAxis 
                      dataKey="name" 
                      tick={{ fill: '#cbd5e1', fontSize: 12 }}
                      angle={-45}
                      textAnchor="end"
                      height={80}
                    />
                    <YAxis tick={{ fill: '#cbd5e1', fontSize: 12 }} />
                    <Tooltip content={<CustomTooltip />} />
                    <Bar dataKey="value" radius={[4, 4, 0, 0]}>
                      {vulnerabilityData.map((entry, index) => (
                        <Cell key={`cell-${index}`} fill={entry.color} />
                      ))}
                    </Bar>
                  </BarChart>
                </ResponsiveContainer>
              </div>

              <div className="mt-6 space-y-2">
                {vulnerabilityData.map((item, index) => (
                  <div key={index} className="flex items-center justify-between p-3 bg-slate-800/50 rounded-lg border border-cyan-400/10">
                    <div className="flex items-center gap-3">
                      <div 
                        className="w-3 h-3 rounded-full" 
                        style={{ backgroundColor: item.color }}
                      />
                      <span className="text-slate-300 text-sm">{item.name}</span>
                    </div>
                    <div className="text-cyan-400 font-semibold text-sm">
                      {item.value} ({item.percentage}%)
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>

        {/* Summary Statistics */}
        <div className="mt-8 grid grid-cols-1 md:grid-cols-4 gap-4">
          <div className="bg-gradient-to-br from-slate-700/40 to-slate-600/40 rounded-xl p-4 border border-cyan-400/20 text-center">
            <div className="text-2xl font-bold text-cyan-400">{totalLines}</div>
            <div className="text-slate-300 text-sm">Total Lines</div>
          </div>
          <div className="bg-gradient-to-br from-slate-700/40 to-slate-600/40 rounded-xl p-4 border border-cyan-400/20 text-center">
            <div className="text-2xl font-bold text-red-400">{vulnerableLines}</div>
            <div className="text-slate-300 text-sm">Vulnerable Lines</div>
          </div>
          <div className="bg-gradient-to-br from-slate-700/40 to-slate-600/40 rounded-xl p-4 border border-cyan-400/20 text-center">
            <div className="text-2xl font-bold text-emerald-400">{cleanLines}</div>
            <div className="text-slate-300 text-sm">Clean Lines</div>
          </div>
          <div className="bg-gradient-to-br from-slate-700/40 to-slate-600/40 rounded-xl p-4 border border-cyan-400/20 text-center">
            <div className="text-2xl font-bold text-purple-400">{Object.keys(vulnerabilityTypes).length}</div>
            <div className="text-slate-300 text-sm">Vulnerability Types</div>
          </div>
        </div>
      </div>
    </div>
  );
};